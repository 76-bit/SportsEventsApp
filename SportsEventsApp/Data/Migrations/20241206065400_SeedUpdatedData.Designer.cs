// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SportsEventsApp.Data;

#nullable disable

namespace SportsEventsApp.Data.Migrations
{
    [DbContext(typeof(SportEventsAppDbContext))]
    [Migration("20241206065400_SeedUpdatedData")]
    partial class SeedUpdatedData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Fighter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The unique identifier of the fighter");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The weight class (category) of the fighter");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("First name of the fighter");

                    b.Property<double>("Height")
                        .HasColumnType("float")
                        .HasComment("The height of the fighter in feet");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("URL for the fighter's image");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("Last name of the fighter");

                    b.Property<string>("NickName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("Nickname of the fighter");

                    b.Property<int>("Reach")
                        .HasColumnType("int")
                        .HasComment("The fighter's reach in inches");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Fighters");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d4237fc1-19ef-4b1d-a39d-be17618df31e"),
                            CategoryId = new Guid("2a5315ad-b76c-44f5-a96e-1df84ee3d88e"),
                            DateOfBirth = new DateTime(1988, 7, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Conor",
                            Height = 5.7999999999999998,
                            ImageUrl = "https://www.sherdog.com/image_crop/200/300/_images/fighter/20220325093124_Conor_McGregor_ff.JPG",
                            LastName = "McGregor",
                            NickName = "The Notorious",
                            Reach = 74
                        },
                        new
                        {
                            Id = new Guid("be7039ea-6544-475d-8059-fd48c697f97a"),
                            CategoryId = new Guid("2a5315ad-b76c-44f5-a96e-1df84ee3d88e"),
                            DateOfBirth = new DateTime(1988, 9, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Khabib",
                            Height = 5.0999999999999996,
                            ImageUrl = "https://www.datocms-assets.com/99008/1696277875-untitled-design-5.png",
                            LastName = "Nurmagomedov",
                            NickName = "The Eagle",
                            Reach = 70
                        },
                        new
                        {
                            Id = new Guid("9e39741d-52d4-40f3-95f9-d476861da18b"),
                            CategoryId = new Guid("c7962691-f6ce-45f2-b76a-b58d24f816f9"),
                            DateOfBirth = new DateTime(1989, 7, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Israel",
                            Height = 6.4000000000000004,
                            ImageUrl = "https://glory.pinkyellow.network/assets/fighters/israel-the-last-style-bender-adesanya/thumbnail.jpg",
                            LastName = "Adesanya",
                            NickName = "The Last Stylebender",
                            Reach = 80
                        },
                        new
                        {
                            Id = new Guid("897acab7-e5f2-4caa-921d-d47d137c0bff"),
                            CategoryId = new Guid("c7962691-f6ce-45f2-b76a-b58d24f816f9"),
                            DateOfBirth = new DateTime(1987, 7, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Alex",
                            Height = 6.4000000000000004,
                            ImageUrl = "https://dmxg5wxfqgb4u.cloudfront.net/styles/card_advance_small_280x356/s3/2024-10/100324-Alex-Pereira-UFC-307-Press-Conference-THUMB-GettyImages-2176549340.jpg?itok=5C_djKwj",
                            LastName = "Pereira",
                            NickName = "Poatan",
                            Reach = 79
                        },
                        new
                        {
                            Id = new Guid("115fd96d-906b-4880-8bf5-32e5295c8145"),
                            CategoryId = new Guid("c7962691-f6ce-45f2-b76a-b58d24f816f9"),
                            DateOfBirth = new DateTime(1975, 8, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Anderson",
                            Height = 6.2000000000000002,
                            ImageUrl = "https://www.denverpost.com/wp-content/uploads/2016/04/20140801_084436_anderson-silva.jpg?w=640",
                            LastName = "Silva",
                            NickName = "The Spider",
                            Reach = 77
                        },
                        new
                        {
                            Id = new Guid("945c2a10-20ee-455b-9250-1e07b1652cf6"),
                            CategoryId = new Guid("c7962691-f6ce-45f2-b76a-b58d24f816f9"),
                            DateOfBirth = new DateTime(1977, 4, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Chael",
                            Height = 6.0999999999999996,
                            ImageUrl = "https://www.sherdog.com/image_crop/200/300/_images/fighter/20131219125416_chael_sonnen.JPG",
                            LastName = "Sonnen",
                            NickName = "The American Gangster",
                            Reach = 73
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "274f50e2-e329-4a18-b68c-9ce664576802",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "15afeee0-c7d4-47d4-94df-4bff9c107863",
                            Email = "admin@mma.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@MMA.COM",
                            NormalizedUserName = "ADMIN@MMA.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEByR1W5K3Eokjn4FdO0T6QFYLzCvve1R5kACJPa0YNPknqMUr9VYfjH7+sFVR7CiNA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "edad879d-853b-42cb-9334-0150795bafd7",
                            TwoFactorEnabled = false,
                            UserName = "admin@mma.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SportsEventsApp.Data.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The id of the category");

                    b.Property<double>("MaxWeight")
                        .HasColumnType("float")
                        .HasComment("The minimum required weight needed to clasify as this weight, in pounds.");

                    b.Property<double>("MinWeight")
                        .HasColumnType("float")
                        .HasComment("The minimum required weight needed to clasify as this weight, in pounds.");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("The name of the category, exemple: LightWeight, MiddleWeight....");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b31c7d92-79d0-4c8a-9f0f-39be3df0e993"),
                            MaxWeight = 115.0,
                            MinWeight = 106.0,
                            Name = "Strawweight"
                        },
                        new
                        {
                            Id = new Guid("9d55b9c9-3eba-43f3-9acd-e0e12cea3960"),
                            MaxWeight = 125.0,
                            MinWeight = 115.0,
                            Name = "Flyweight"
                        },
                        new
                        {
                            Id = new Guid("ac6d2b9b-304d-4c8b-86c8-2e59ea4fa030"),
                            MaxWeight = 135.0,
                            MinWeight = 125.0,
                            Name = "Bantamweight"
                        },
                        new
                        {
                            Id = new Guid("9eaa1166-cb8f-4592-8de7-2a845e4f9c1f"),
                            MaxWeight = 145.0,
                            MinWeight = 135.0,
                            Name = "Featherweight"
                        },
                        new
                        {
                            Id = new Guid("2a5315ad-b76c-44f5-a96e-1df84ee3d88e"),
                            MaxWeight = 155.0,
                            MinWeight = 145.0,
                            Name = "Lightweight"
                        },
                        new
                        {
                            Id = new Guid("755672e7-6a15-4056-a6bc-b3809d2df9cb"),
                            MaxWeight = 170.0,
                            MinWeight = 155.0,
                            Name = "Welterweight"
                        },
                        new
                        {
                            Id = new Guid("c7962691-f6ce-45f2-b76a-b58d24f816f9"),
                            MaxWeight = 185.0,
                            MinWeight = 170.0,
                            Name = "Middleweight"
                        },
                        new
                        {
                            Id = new Guid("15a24b87-6509-4189-817c-ea65b3f1f9e3"),
                            MaxWeight = 205.0,
                            MinWeight = 185.0,
                            Name = "Light Heavyweight"
                        },
                        new
                        {
                            Id = new Guid("1465824f-659c-4139-9fb2-1561d3ac6385"),
                            MaxWeight = 265.0,
                            MinWeight = 205.0,
                            Name = "Heavyweight"
                        });
                });

            modelBuilder.Entity("SportsEventsApp.Data.Fight", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Unique identifier of the fight");

                    b.Property<DateTime>("DateOfTheFight")
                        .HasColumnType("datetime2")
                        .HasComment("The date of the fight, not the date of its adding");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("A brief decription of the fight details, also has a minimum and maximum characher limit");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("url of the image");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("this is a bool that keeps track of the status of the fight- deleted or not (soft delete)");

                    b.Property<string>("PublisherId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("The id of the admin that added the fight, note that users and guests cannot add or delete fights");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("The name of the title, has a minimum and maximum characher limit");

                    b.HasKey("Id");

                    b.HasIndex("PublisherId");

                    b.ToTable("Fights");

                    b.HasData(
                        new
                        {
                            Id = new Guid("281325cb-ba57-4792-8cb8-335a90c50191"),
                            DateOfTheFight = new DateTime(2018, 10, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "A legendary UFC fight between two icons of the sport.",
                            ImageUrl = "https://i.ytimg.com/vi/JuBBIJ7adjM/hq720.jpg",
                            IsDeleted = false,
                            PublisherId = "274f50e2-e329-4a18-b68c-9ce664576802",
                            Title = "Conor McGregor vs Khabib Nurmagomedov"
                        },
                        new
                        {
                            Id = new Guid("748d39ff-6afd-4905-a09c-57c687ab8b72"),
                            DateOfTheFight = new DateTime(2023, 4, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "A thrilling bout between two fierce rivals.",
                            ImageUrl = "https://www.bet-experts.com/wp-content/uploads/2023/04/ufc-287-bet-experts.jpg",
                            IsDeleted = false,
                            PublisherId = "274f50e2-e329-4a18-b68c-9ce664576802",
                            Title = "Israel Adesanya vs Alex Pereira"
                        },
                        new
                        {
                            Id = new Guid("11c546d0-40de-4aa7-9114-9f098d40592a"),
                            DateOfTheFight = new DateTime(2012, 7, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "A classic middleweight bout filled with drama.",
                            ImageUrl = "https://i.ytimg.com/vi/ugQCRH9f5QU/maxresdefault.jpg",
                            IsDeleted = false,
                            PublisherId = "274f50e2-e329-4a18-b68c-9ce664576802",
                            Title = "Anderson Silva vs Chael Sonnen"
                        });
                });

            modelBuilder.Entity("SportsEventsApp.Data.FighterFight", b =>
                {
                    b.Property<Guid>("FighterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FightId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("FighterId", "FightId");

                    b.HasIndex("FightId");

                    b.ToTable("FightersFights");

                    b.HasData(
                        new
                        {
                            FighterId = new Guid("d4237fc1-19ef-4b1d-a39d-be17618df31e"),
                            FightId = new Guid("281325cb-ba57-4792-8cb8-335a90c50191")
                        },
                        new
                        {
                            FighterId = new Guid("be7039ea-6544-475d-8059-fd48c697f97a"),
                            FightId = new Guid("281325cb-ba57-4792-8cb8-335a90c50191")
                        },
                        new
                        {
                            FighterId = new Guid("9e39741d-52d4-40f3-95f9-d476861da18b"),
                            FightId = new Guid("748d39ff-6afd-4905-a09c-57c687ab8b72")
                        },
                        new
                        {
                            FighterId = new Guid("897acab7-e5f2-4caa-921d-d47d137c0bff"),
                            FightId = new Guid("748d39ff-6afd-4905-a09c-57c687ab8b72")
                        });
                });

            modelBuilder.Entity("SportsEventsApp.Data.UserFight", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("FightId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "FightId");

                    b.HasIndex("FightId");

                    b.ToTable("UsersFights");
                });

            modelBuilder.Entity("Fighter", b =>
                {
                    b.HasOne("SportsEventsApp.Data.Category", "Category")
                        .WithMany("Fighters")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SportsEventsApp.Data.Fight", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "Publisher")
                        .WithMany()
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("SportsEventsApp.Data.FighterFight", b =>
                {
                    b.HasOne("SportsEventsApp.Data.Fight", "Fight")
                        .WithMany("FighterFights")
                        .HasForeignKey("FightId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Fighter", "Fighter")
                        .WithMany()
                        .HasForeignKey("FighterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Fight");

                    b.Navigation("Fighter");
                });

            modelBuilder.Entity("SportsEventsApp.Data.UserFight", b =>
                {
                    b.HasOne("SportsEventsApp.Data.Fight", "Fight")
                        .WithMany("UsersFights")
                        .HasForeignKey("FightId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Fight");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SportsEventsApp.Data.Category", b =>
                {
                    b.Navigation("Fighters");
                });

            modelBuilder.Entity("SportsEventsApp.Data.Fight", b =>
                {
                    b.Navigation("FighterFights");

                    b.Navigation("UsersFights");
                });
#pragma warning restore 612, 618
        }
    }
}
